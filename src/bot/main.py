import asyncio
import logging
from aiogram.types import Message
from aiogram.filters import Command

from src.config import config
from src.bot.config import bot, dp

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


@dp.message(Command("start"))
async def start_command(message: Message) -> None:
    logger.info(
        {
            "action": "start_command",
            "status": "received",
            "data": {
                "user_id": message.from_user.id,
                "username": message.from_user.username,
                "chat_id": message.chat.id,
            },
        }
    )

    if message.chat.id not in config.message_chat_ids:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
        logger.warning(
            {
                "action": "start_command",
                "status": "unauthorized",
                "data": {"chat_id": message.chat.id},
            }
        )
        return

    await message.answer(
        "üîç –°–∏—Å—Ç–µ–º–∞ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞"
    )

    logger.info(
        {
            "action": "start_command",
            "status": "success",
            "data": {"chat_id": message.chat.id},
        }
    )


@dp.message(Command("status"))
async def status_command(message: Message) -> None:
    logger.info(
        {
            "action": "status_command",
            "status": "received",
            "data": {"chat_id": message.chat.id},
        }
    )

    if message.chat.id not in config.message_chat_ids:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
        return

    await message.answer("‚úÖ Telegram –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")

    logger.info(
        {
            "action": "status_command",
            "status": "success",
            "data": {"chat_id": message.chat.id},
        }
    )


@dp.message(Command("help"))
async def help_command(message: Message) -> None:
    logger.info(
        {
            "action": "help_command",
            "status": "received",
            "data": {"chat_id": message.chat.id},
        }
    )

    if message.chat.id not in config.message_chat_ids:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
        return

    await message.answer(
        "üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ —Å–∏—Å—Ç–µ–º–µ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è:\n\n"
        "üîç –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫ —Å –∫–∞–º–µ—Ä—ã\n"
        "üë§ –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ\n"
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    )

    logger.info(
        {
            "action": "help_command",
            "status": "success",
            "data": {"chat_id": message.chat.id},
        }
    )


@dp.message()
async def handle_all_messages(message: Message) -> None:
    logger.info(
        {
            "action": "handle_all_messages",
            "status": "received",
            "data": {
                "text": message.text,
                "chat_id": message.chat.id,
                "user_id": message.from_user.id,
                "username": message.from_user.username,
            },
        }
    )

    if message.chat.id not in config.message_chat_ids:
        return

    await message.answer(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")


async def main():
    logger.info(
        {
            "action": "bot_main",
            "status": "start",
            "data": {"bot_username": "@reels_loader_bot"},
        }
    )

    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(
            {
                "action": "bot_main",
                "status": "error",
                "data": {"error": str(e)},
            }
        )
    finally:
        await bot.session.close()
        logger.info(
            {
                "action": "bot_main",
                "status": "cleanup",
                "data": {"message": "Bot session closed"},
            }
        )


if __name__ == "__main__":
    asyncio.run(main())
